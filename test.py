# coding: utf-8
# created by liu hui
import chess
import datetime


# 存储权重的数组 white
weights_white = [100, 100, 100, 100, 100, 100, 100, 100,
                 105, 110, 110, 80, 80, 110, 110, 105,
                 105, 95, 90, 100, 100, 90, 95, 105,
                 100, 100, 100, 120, 120, 100, 100, 100,
                 105, 105, 110, 125, 125, 110, 105, 105,
                 110, 110, 120, 130, 130, 120, 110, 110,
                 150, 150, 150, 150, 150, 150, 150, 150,
                 100, 100, 100, 100, 100, 100, 100, 100,

                 250, 260, 270, 270, 270, 270, 260, 250,
                 260, 280, 300, 305, 305, 300, 280, 260,
                 270, 305, 310, 305, 305, 310, 305, 270,
                 270, 300, 315, 320, 320, 315, 300, 270,
                 270, 305, 315, 320, 320, 315, 305, 270,
                 270, 300, 310, 315, 315, 310, 300, 270,
                 260, 280, 300, 300, 300, 300, 280, 260,
                 250, 260, 270, 270, 270, 270, 250, 250,

                 280, 290, 290, 290, 290, 290, 290, 280,
                 290, 305, 300, 300, 300, 300, 305, 290,
                 290, 310, 310, 310, 310, 310, 310, 290,
                 290, 300, 310, 310, 310, 310, 300, 290,
                 290, 305, 305, 310, 310, 305, 305, 290,
                 290, 300, 305, 310, 310, 305, 300, 290,
                 290, 300, 300, 300, 300, 300, 300, 290,
                 280, 290, 290, 290, 290, 290, 290, 280,

                 500, 500, 500, 505, 505, 500, 500, 500,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 505, 510, 510, 510, 510, 510, 510, 505,
                 500, 500, 500, 500, 500, 500, 500, 500,

                 880, 890, 890, 895, 895, 890, 890, 880,
                 890, 900, 905, 900, 900, 900, 900, 890,
                 890, 905, 905, 905, 905, 905, 900, 890,
                 900, 900, 905, 905, 905, 905, 900, 895,
                 895, 900, 905, 905, 905, 905, 900, 895,
                 890, 900, 905, 905, 905, 905, 900, 890,
                 890, 900, 900, 900, 900, 900, 900, 890,
                 880, 890, 890, 895, 895, 890, 890, 880,

                 9020, 9030, 9010, 9000, 9000, 9010, 9030, 9020,
                 9020, 9020, 9000, 9000, 9000, 9000, 9020, 9020,
                 8990, 8980, 8980, 8980, 8980, 8980, 8980, 8990,
                 8980, 8970, 8970, 8960, 8960, 8970, 8970, 8980,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970]

# 存储权重的数组 black
weights_black = [100, 100, 100, 100, 100, 100, 100, 100,
                 150, 150, 150, 150, 150, 150, 150, 150,
                 110, 110, 120, 130, 130, 120, 110, 110,
                 105, 105, 110, 125, 125, 110, 105, 105,
                 100, 100, 100, 120, 120, 100, 100, 100,
                 105, 95, 90, 100, 100, 90, 95, 105,
                 105, 110, 110, 100, 100, 110, 110, 105,
                 100, 100, 100, 100, 100, 100, 100, 100,

                 250, 260, 270, 270, 270, 270, 260, 250,
                 260, 280, 300, 305, 305, 300, 280, 260,
                 270, 305, 310, 315, 315, 310, 305, 270,
                 270, 300, 315, 320, 320, 315, 300, 270,
                 270, 300, 315, 320, 320, 315, 300, 270,
                 270, 305, 310, 315, 315, 310, 305, 270,
                 260, 280, 300, 300, 300, 300, 280, 260,
                 250, 260, 270, 270, 270, 270, 260, 250,

                 280, 290, 290, 290, 290, 290, 290, 280,
                 290, 300, 300, 300, 300, 300, 300, 290,
                 290, 300, 305, 310, 310, 305, 300, 290,
                 290, 305, 305, 310, 310, 305, 305, 290,
                 290, 300, 310, 310, 310, 310, 300, 290,
                 290, 310, 310, 310, 310, 310, 310, 290,
                 290, 305, 300, 300, 300, 300, 305, 290,
                 280, 290, 290, 290, 290, 290, 290, 280,

                 500, 500, 500, 500, 500, 500, 500, 500,
                 505, 510, 510, 510, 510, 510, 510, 505,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 495, 500, 500, 500, 500, 500, 500, 495,
                 500, 500, 500, 505, 505, 500, 500, 500,

                 880, 890, 890, 895, 895, 890, 890, 880,
                 890, 900, 905, 900, 900, 900, 900, 890,
                 890, 905, 905, 905, 905, 905, 900, 890,
                 900, 900, 905, 905, 905, 905, 900, 895,
                 895, 900, 905, 905, 905, 905, 900, 895,
                 890, 900, 905, 905, 905, 905, 900, 890,
                 890, 900, 900, 900, 900, 900, 900, 890,
                 880, 890, 890, 895, 895, 890, 890, 880,

                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8970, 8960, 8960, 8950, 8950, 8960, 8960, 8970,
                 8980, 8970, 8970, 8960, 8960, 8970, 8970, 8980,
                 8990, 8980, 8980, 8980, 8980, 8980, 8980, 8990,
                 9020, 9020, 9000, 9000, 9000, 9000, 9020, 9020,
                 9020, 9030, 9010, 9000, 9000, 9010, 9030, 9020]

index_list = [0, 1, 2, 3, 4, 5, 6, 7,
              8, 9, 10, 11, 12, 13, 14, 15,
              16, 17, 18, 19, 20, 21, 22, 23,
              24, 25, 26, 27, 28, 29, 30, 31,
              32, 33, 34, 35, 36, 37, 38, 39,
              40, 41, 42, 43, 44, 45, 46, 47,
              48, 49, 50, 51, 52, 53, 54, 55,
              56, 57, 58, 59, 60, 61, 62, 63]


# 白色方的接口
def white(fen, f):
    return f(fen)


# 黑色方的接口
def black(fen, f):
    return f(fen)


# 程序入口、执行顺序、合法性判断、胜负判断
def main():
    def f():
        count = 0
        is_white = True
        board = chess.Board()
        while not board.is_game_over():
            count += 1
            print count
            # 白方先手
            if is_white:
                print "turn to white"
                print board
                start = datetime.datetime.now()
                import agent
                mov = chess.Move.from_uci(white(board.fen(), agent.respond_to))
                end = datetime.datetime.now()
                print "%fs" % (end - start).total_seconds()
                moves = ""
                for m in board.legal_moves:
                    moves += m.uci()+" "
                print moves
                print mov.uci()
                if mov in board.legal_moves:
                    board.push(mov)
                else:
                    print "illegal mov Black win"
                    break
                is_white = False
            else:
                # 计算ai用时
                print "turn to black"
                print board
                start = datetime.datetime.now()
                import player
                mov = chess.Move.from_uci(black(board.fen(), player.respond_to))
                end = datetime.datetime.now()
                print "%fs" % (end - start).total_seconds()
                moves = ""
                for m in board.legal_moves:
                    moves += m.uci() + " "
                print moves
                print mov.uci()
                if mov in board.legal_moves:
                    board.push(mov)
                else:
                    print "illegal mov white win"
                    break
                is_white = True
        print board.fen()
        if is_white:
            print "Black win"
        else:
            print "white win"
    return f


if __name__ == '__main__':
    main()()
